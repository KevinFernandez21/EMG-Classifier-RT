"""
EMG Processor AUTOM√ÅTICO - Para ESP32 sin botones
Procesa datos EMG continuos enviados autom√°ticamente por ESP32
"""

import serial
import time
import numpy as np
from typing import Dict, Tuple, Optional
import threading
from datetime import datetime
import queue

class EMGProcessor:
    """Procesador AUTOM√ÅTICO para ESP32 + uMyo_BLE"""
    
    def __init__(self, 
                 port: str = 'COM3',
                 baudrate: int = 115200,
                 timeout: float = 1.0):
        """
        Inicializar procesador EMG autom√°tico
        
        Args:
            port: Puerto serie del ESP32
            baudrate: Velocidad (115200 para ESP32)
            timeout: Timeout para lectura
        """
        self.port = port
        self.baudrate = baudrate
        self.timeout = timeout
        
        # Variables de conexi√≥n
        self.serial_connection = None
        self.connected = False
        self.reading_thread = None
        self.stop_reading = False
        
        # Buffer de datos
        self.data_queue = queue.Queue(maxsize=100)
        self.last_emg_data = None
        self.last_detection_time = None
        
        # Estado del sistema AUTOM√ÅTICO
        self.session_active = True  # SIEMPRE ACTIVO
        self.current_movement = {"id": 0, "name": "AUTO"}
        
        print("ü§ñ Procesador EMG AUTOM√ÅTICO inicializado")
        
    def connect(self) -> bool:
        """Conectar al ESP32"""
        try:
            self.serial_connection = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                timeout=self.timeout
            )
            
            # Esperar inicializaci√≥n ESP32
            time.sleep(3)
            
            # Limpiar buffer
            self.serial_connection.flushInput()
            self.serial_connection.flushOutput()
            
            self.connected = True
            print(f"‚úÖ Conectado al ESP32 autom√°tico en {self.port}")
            
            # Iniciar hilo de lectura
            self.start_reading_thread()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error conectando ESP32: {e}")
            self.connected = False
            return False
    
    def disconnect(self):
        """Desconectar del ESP32"""
        self.stop_reading = True
        self.connected = False
        
        if self.reading_thread and self.reading_thread.is_alive():
            self.reading_thread.join(timeout=2.0)
        
        if self.serial_connection and self.serial_connection.is_open:
            self.serial_connection.close()
            
        print("üîå Desconectado del ESP32 autom√°tico")
    
    def start_reading_thread(self):
        """Iniciar hilo de lectura"""
        self.stop_reading = False
        self.reading_thread = threading.Thread(target=self._read_serial_data, daemon=True)
        self.reading_thread.start()
        print("üîÑ Hilo de lectura ESP32 autom√°tico iniciado")
    
    def _read_serial_data(self):
        """Leer datos del ESP32 en hilo separado - MODO AUTOM√ÅTICO"""
        while not self.stop_reading and self.connected:
            try:
                if self.serial_connection and self.serial_connection.in_waiting > 0:
                    line = self.serial_connection.readline().decode('utf-8').strip()
                    
                    if line:
                        self._process_serial_line(line)
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Error leyendo ESP32: {e}")
                time.sleep(0.1)
                
            time.sleep(0.01)
    
    def _process_serial_line(self, line: str):
        """Procesar l√≠nea del ESP32 - MODO AUTOM√ÅTICO"""
        try:
            # Mensajes de control del ESP32 autom√°tico
            if line == "CSV_START":
                self.session_active = True
                print("ü§ñ ESP32: Sistema autom√°tico iniciado")
                return
            elif line == "CSV_END":
                self.session_active = False
                print("‚èπÔ∏è ESP32: Sistema autom√°tico terminado")
                return
            elif "timestamp,session_time" in line:
                print("üìã ESP32: Headers CSV recibidos (modo autom√°tico)")
                return
            elif "SISTEMA EMG AUTOM√ÅTICO" in line or "===" in line:
                print(f"‚ÑπÔ∏è ESP32: {line}")
                return
            
            # Filtrar mensajes de estado (menos verbose)
            elif line.startswith("SISTEMA:"):
                self.last_detection_time = time.time()
                # No imprimir todos los mensajes de estado
                return
            
            # PROCESAR DATOS CSV AUTOM√ÅTICOS
            # Formato: timestamp,session_time,emg1,emg2,emg3,movement_id,movement_name
            if "," in line and len(line.split(",")) >= 6:
                parts = line.split(",")
                try:
                    timestamp = int(parts[0])
                    session_time = int(parts[1])
                    emg1 = float(parts[2])
                    emg2 = float(parts[3])  
                    emg3 = float(parts[4])
                    movement_id = int(parts[5]) if parts[5].isdigit() else 0
                    movement_name = parts[6] if len(parts) > 6 else "AUTO"
                    
                    # Crear estructura de datos EMG autom√°tica
                    emg_data = {
                        'timestamp': timestamp,
                        'session_time': session_time,
                        'emg1': emg1,
                        'emg2': emg2,
                        'emg3': emg3,
                        'movement_id': movement_id,
                        'movement_name': movement_name,
                        'esp32_timestamp': datetime.now().isoformat(),
                        'mode': 'automatic'
                    }
                    
                    # Actualizar datos actuales
                    self.last_emg_data = emg_data
                    self.last_detection_time = time.time()
                    self.current_movement = {"id": movement_id, "name": movement_name}
                    
                    # Agregar a cola si no est√° llena
                    if not self.data_queue.full():
                        self.data_queue.put(emg_data)
                    
                    # Imprimir datos EMG menos frecuentemente (cada 10 muestras)
                    if hasattr(self, '_sample_count'):
                        self._sample_count += 1
                    else:
                        self._sample_count = 1
                        
                    if self._sample_count % 10 == 0:  # Solo cada 10 muestras
                        print(f"üìä EMG Auto: EMG1:{emg1:.2f} EMG2:{emg2:.2f} EMG3:{emg3:.2f}")
                        
                except (ValueError, IndexError) as e:
                    # Manejo silencioso de errores de parsing
                    pass
                        
        except Exception as e:
            if "timeout" not in str(e).lower():
                print(f"‚ùå Error procesando l√≠nea ESP32: {e}")
    
    def is_sensor_connected(self) -> bool:
        """
        Verificar si ESP32 est√° conectado y enviando datos autom√°ticamente
        """
        if not self.connected:
            return False
            
        if self.last_detection_time is None:
            return False
            
        # Considerar conectado si hay actividad del ESP32 en los √∫ltimos 5 segundos
        time_since_last_data = time.time() - self.last_detection_time
        return time_since_last_data <= 5.0
    
    def get_latest_emg_data(self) -> Optional[Dict]:
        """Obtener los √∫ltimos datos EMG del ESP32 autom√°tico"""
        return self.last_emg_data
    
    def get_emg_features(self) -> Dict:
        """
        Extraer caracter√≠sticas EMG del modo autom√°tico
        """
        if not self.last_emg_data:
            # Retornar datos por defecto si no hay datos
            return {
                'emg1_raw': 0.0,
                'emg2_raw': 0.0,
                'emg3_raw': 0.0,
                'session_time': 0,
                'esp32_timestamp': 0,
                'mode': 'automatic'
            }
        
        emg_data = self.last_emg_data
        features = {}
        
        try:
            # Datos raw del uMyo_BLE v3 en modo autom√°tico
            features['emg1_raw'] = float(emg_data.get('emg1', 0.0))
            features['emg2_raw'] = float(emg_data.get('emg2', 0.0))
            features['emg3_raw'] = float(emg_data.get('emg3', 0.0))
            
            # Informaci√≥n temporal
            features['session_time'] = int(emg_data.get('session_time', 0))
            features['esp32_timestamp'] = int(emg_data.get('timestamp', 0))
            
            # Modo autom√°tico
            features['mode'] = 'automatic'
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error extrayendo caracter√≠sticas: {e}")
            # Retornar datos por defecto en caso de error
            features = {
                'emg1_raw': 0.0,
                'emg2_raw': 0.0,
                'emg3_raw': 0.0,
                'session_time': 0,
                'esp32_timestamp': 0,
                'mode': 'automatic'
            }
            
        return features
    
    def detect_gesture(self, features: Dict) -> Tuple[int, str]:
        """
        En modo autom√°tico, Python define el gesto, no el ESP32
        """
        # En modo autom√°tico, siempre retornar gesto neutral
        # Python controlar√° qu√© gesto se est√° capturando
        return 0, "AUTO"
    
    def process_frame(self, frame=None) -> Tuple[None, Dict, bool]:
        """
        Procesar 'frame' - Compatible con interfaz existente
        Para EMG autom√°tico no hay frame visual, solo caracter√≠sticas
        
        Args:
            frame: No usado para EMG
            
        Returns:
            Tuple: (None, caracter√≠sticas, estado_conexi√≥n)
        """
        features = self.get_emg_features()
        is_connected = self.is_sensor_connected()
        
        return None, features, is_connected
    
    def get_status_info(self) -> Dict:
        """Obtener informaci√≥n de estado del ESP32 autom√°tico"""
        return {
            'connected': self.connected,
            'session_active': self.session_active,
            'current_movement': self.current_movement,
            'last_data_time': self.last_detection_time,
            'port': self.port,
            'baudrate': self.baudrate,
            'device_type': 'ESP32 + uMyo_BLE v3 (Autom√°tico)',
            'mode': 'automatic'
        }
    
    def cleanup(self):
        """Limpiar recursos"""
        print("üßπ Limpiando procesador ESP32 autom√°tico...")
        self.disconnect()

# Funciones de utilidad
def create_emg_processor(port='COM3', baudrate=115200) -> EMGProcessor:
    """Crear procesador EMG autom√°tico para ESP32 + uMyo_BLE"""
    processor = EMGProcessor(port=port, baudrate=baudrate)
    if processor.connect():
        return processor
    else:
        print("‚ùå No se pudo conectar al ESP32 autom√°tico")
        return processor

def detect_esp32_ports():
    """Detectar puertos ESP32"""
    import serial.tools.list_ports
    
    ports = []
    for port in serial.tools.list_ports.comports():
        # Buscar ESP32 o puertos serie comunes
        if any(keyword in port.description.lower() for keyword in 
               ['cp210x', 'ch340', 'esp32', 'usb-serial', 'uart']):
            ports.append(port.device)
        elif (port.device.startswith('COM') or 
              port.device.startswith('/dev/ttyUSB') or 
              port.device.startswith('/dev/ttyACM')):
            ports.append(port.device)
    
    return ports if ports else ['COM3', 'COM4', 'COM5']

def test_esp32_connection(port='COM3', timeout=10.0) -> bool:
    """Probar conexi√≥n con ESP32 autom√°tico"""
    try:
        processor = EMGProcessor(port=port, timeout=2.0)
        if processor.connect():
            print(f"‚úÖ ESP32 autom√°tico conectado en {port}")
            time.sleep(3)  # Esperar datos
            
            # Verificar datos
            test_data = processor.get_latest_emg_data()
            processor.cleanup()
            
            if test_data:
                print(f"üìä Datos autom√°ticos recibidos: EMG1={test_data.get('emg1', 0):.3f}")
                return True
            else:
                print(f"‚ö†Ô∏è Conectado pero esperando datos autom√°ticos...")
                return True  # Consideramos exitoso si se conecta
        else:
            return False
    except Exception as e:
        print(f"‚ùå Error probando ESP32 autom√°tico: {e}")
        return False